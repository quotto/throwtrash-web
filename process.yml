# Orb 'circleci/aws-cli@0.1.16' resolved to 'circleci/aws-cli@0.1.16'
version: 2
jobs:
  frontend-test:
    docker:
    - image: circleci/node:10.1.0
    steps:
    - run:
        command: |
          if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
            echo "export API_HOST=backend.mythrowaway.net" >> $BASH_ENV
            echo "export RUNLEVEL=INFO" >> $BASH_ENV
            echo "export DBREGION=ap-northeast-1" >> $BASH_ENV
          else
            echo "export RUNLEVEL=DEBUG" >> $BASH_ENV
            echo "export STAGE=dev" >> $BASH_ENV
            echo "export FRONTEND_VERSION=0" >> $BASH_ENV
            echo "export DBREGION=us-west-2" >> $BASH_ENV
          fi
    - checkout
    - restore_cache:
        keys:
        - npm-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
        - npm-deps-{{ .Branch }}
        - npm-deps-
    - run:
        name: install
        command: npm install
        working_directory: frontend
    - save_cache:
        key: npm-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
        paths:
        - frontend/node_modules
    - run:
        name: frontend test
        command: npm run test
        working_directory: frontend
  backend-test:
    docker:
    - image: circleci/node:12.0.0
    steps:
    - run:
        command: |
          if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
            echo "export API_HOST=backend.mythrowaway.net" >> $BASH_ENV
            echo "export RUNLEVEL=INFO" >> $BASH_ENV
            echo "export DBREGION=ap-northeast-1" >> $BASH_ENV
          else
            echo "export RUNLEVEL=DEBUG" >> $BASH_ENV
            echo "export STAGE=dev" >> $BASH_ENV
            echo "export FRONTEND_VERSION=0" >> $BASH_ENV
            echo "export DBREGION=us-west-2" >> $BASH_ENV
          fi
    - checkout
    - restore_cache:
        keys:
        - npm-deps-{{ .Branch }}-{{ checksum "backend/src/package-lock.json"}}
        - npm-deps-{{ .Branch }}
        - npm-deps-
    - run:
        name: install
        command: npm install
        working_directory: backend
    - save_cache:
        key: npm-deps-{{ .Branch }}-{{ checksum "backend/src/package-lock.json"}}
        paths:
        - backend/src/node_modules
    - run:
        name: set GCP Credentials
        command: |
          echo ${GCP_TEST_CREDENTIALS} > ./serviceAccountKey.json
          echo "export GOOGLE_APPLICATION_CREDENTIALS=./serviceAccountKey.json" >> $BASH_ENV
        working_directory: backend/src
    - run:
        name: backend unit test
        command: npm run test
        working_directory: backend/src
    - run:
        name: backend link test
        command: npm run linktest
        working_directory: backend/src
  api-test:
    docker:
    - image: circleci/node:12.0.0
    steps:
    - run:
        command: |
          if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
            echo "export API_HOST=backend.mythrowaway.net" >> $BASH_ENV
            echo "export RUNLEVEL=INFO" >> $BASH_ENV
            echo "export DBREGION=ap-northeast-1" >> $BASH_ENV
          else
            echo "export RUNLEVEL=DEBUG" >> $BASH_ENV
            echo "export STAGE=dev" >> $BASH_ENV
            echo "export FRONTEND_VERSION=0" >> $BASH_ENV
            echo "export DBREGION=us-west-2" >> $BASH_ENV
          fi
    - checkout
    - restore_cache:
        keys:
        - npm-deps-{{ .Branch }}-{{ checksum "api/src/package-lock.json"}}
        - npm-deps-{{ .Branch }}
        - npm-deps-
    - run:
        name: install
        command: npm install
        working_directory: api/src
    - save_cache:
        key: npm-deps-{{ .Branch }}-{{ checksum "api/src/package-lock.json"}}
        paths:
        - api/src/node_modules
    - run:
        name: api unit test
        command: npm run test
        working_directory: api/src
  frontend-build:
    docker:
    - image: circleci/node:10.1.0
    steps:
    - run:
        command: |
          if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
            echo "export API_HOST=backend.mythrowaway.net" >> $BASH_ENV
            echo "export RUNLEVEL=INFO" >> $BASH_ENV
            echo "export DBREGION=ap-northeast-1" >> $BASH_ENV
          else
            echo "export RUNLEVEL=DEBUG" >> $BASH_ENV
            echo "export STAGE=dev" >> $BASH_ENV
            echo "export FRONTEND_VERSION=0" >> $BASH_ENV
            echo "export DBREGION=us-west-2" >> $BASH_ENV
          fi
    - checkout
    - restore_cache:
        keys:
        - npm-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
    - run:
        name: install
        command: npm install
        working_directory: frontend
    - run:
        name: build
        command: npm run build -- --env.version=${FRONTEND_VERSION} --env.apistage=${API_STAGE} --env.apihost=${API_HOST}
        working_directory: frontend
    - persist_to_workspace:
        root: frontend
        paths:
        - dist
  deploy:
    docker:
    - image: circleci/python:2.7-stretch
    steps:
    - run:
        command: |
          if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
            echo "export API_HOST=backend.mythrowaway.net" >> $BASH_ENV
            echo "export RUNLEVEL=INFO" >> $BASH_ENV
            echo "export DBREGION=ap-northeast-1" >> $BASH_ENV
          else
            echo "export RUNLEVEL=DEBUG" >> $BASH_ENV
            echo "export STAGE=dev" >> $BASH_ENV
            echo "export FRONTEND_VERSION=0" >> $BASH_ENV
            echo "export DBREGION=us-west-2" >> $BASH_ENV
          fi
    - checkout
    - attach_workspace:
        at: frontend
    - restore_cache:
        keys:
        - npm-deps-{{ .Branch }}-{{ checksum "api/src/package-lock.json"}}
        - npm-deps-{{ .Branch }}
        - npm-deps-
    - restore_cache:
        keys:
        - npm-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json"}}
        - npm-deps-{{ .Branch }}
        - npm-deps-
    - restore_cache:
        keys:
        - npm-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
        - npm-deps-{{ .Branch }}
        - npm-deps-
    - run:
        name: Install AWS CLI
        command: |
          if which aws > /dev/null; then
            echo "The AWS CLI is already installed. Skipping."
            exit 0
          fi

          export PIP=$(which pip pip3 | head -1)
          if [[ -n $PIP ]]; then
            if which sudo > /dev/null; then
              sudo $PIP install awscli --upgrade
            else
              # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
              $PIP install awscli --upgrade --user
            fi
          elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
            cd
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            if which sudo > /dev/null; then
              sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            else
              # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
              awscli-bundle/install -b ~/bin/aws
            fi
            rm -rf awscli-bundle*
            cd -
          else
            echo "Unable to install AWS CLI. Please install pip."
            exit 1
          fi
    - run:
        name: set-script
        command: |
          WD=`eval "echo ${CIRCLE_WORKING_DIRECTORY}"`
          chmod +x $WD/script/isChanged
          echo "export PATH=$WD/script:$PATH" >> $BASH_ENV
    - run:
        name: frontend deploy
        command: |
          if isChanged "frontend"; then
            aws s3 sync frontend/dist s3://throwtrash
            if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DST_ID} --paths /v${FRONTEND_VERSION}/*
            fi
          fi
    - run:
        name: backend deploy
        command: |
          if isChanged "backend"; then
            if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
              echo ${GCP_PRODUCTION_CREDENTIALS} > backend/src/serviceAccountKey.json
            else
              echo ${GCP_TEST_CREDENTIALS} > backend/src/serviceAccountKey.json
            fi
            aws cloudformation deploy --template-file backend/cfn/db-template.yml --stack-name throwtrash-backend-db --role-arn ${BACKEND_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM --region ${DBREGION}
            aws cloudformation package --template-file backend/cfn/template.yml --output-template-file backend/cfn/package-template.yml --s3-bucket lambda-function-deployment-${AWS_DEFAULT_REGION} --s3-prefix throwtrashbackend
            aws cloudformation deploy --template-file backend/cfn/package-template.yml --stack-name throwtrash-backend-${STAGE} --parameter-overrides GOOGLECLIENTID=${GOOGLE_CLIENT_ID} GOOGLECLIENTSECRET=${GOOGLE_CLIENT_SECRET} RUNLEVEL=${RUNLEVEL} STAGE=${STAGE} DBREGION=${DBREGION} --role-arn ${BACKEND_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM
          fi
    - run:
        name: api deploy
        command: |
          if isChanged "api"; then
            aws cloudformation package --template-file api/template.yml --output-template-file api/package-template.yml --s3-bucket lambda-function-deployment-${AWS_DEFAULT_REGION} --s3-prefix throwtrashapi
            aws cloudformation deploy --template-file api/package-template.yml --stack-name throwtrash-mobile-api-stack --parameter-overrides RUNLEVEL=${RUNLEVEL} APISTAGE=${API_STAGE} --role-arn ${API_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM
          fi
workflows:
  version: 2
  test_and_deploy:
    jobs:
    - frontend-test:
        filters:
          branches:
            ignore: master
        context: aws-test
    - backend-test:
        filters:
          branches:
            ignore: master
        context: aws-test
    - api-test:
        filters:
          branches:
            ignore: master
    - frontend-build:
        filters:
          branches:
            ignore: master
        requires:
        - frontend-test
    - deploy:
        filters:
          branches:
            ignore: master
        requires:
        - frontend-build
        - backend-test
        - api-test
        context: aws-deploy

# Original config.yml file:
# version: \"2.1\"
# orbs:
#   aws-cli: circleci/aws-cli@0.1.16
# 
# commands:
#   set-stage-env:
#     steps:
#       - run:
#           command: |
#             if [ \"${CIRCLE_BRANCH}\" == \"deploy\" ]; then
#               echo \"export API_HOST=backend.mythrowaway.net\" >> $BASH_ENV
#               echo \"export RUNLEVEL=INFO\" >> $BASH_ENV
#               echo \"export DBREGION=ap-northeast-1\" >> $BASH_ENV
#             else
#               echo \"export RUNLEVEL=DEBUG\" >> $BASH_ENV
#               echo \"export STAGE=dev\" >> $BASH_ENV
#               echo \"export FRONTEND_VERSION=0\" >> $BASH_ENV
#               echo \"export DBREGION=us-west-2\" >> $BASH_ENV
#             fi
# 
# jobs:
#   frontend-test:
#     docker:
#       - image: circleci/node:10.1.0
#     steps:
#       - set-stage-env
#       - checkout
#       - restore_cache:
#           keys:
#             - npm-deps-{{ .Branch }}-{{ checksum \"frontend/package-lock.json\"}}
#             - npm-deps-{{ .Branch }}
#             - npm-deps-
#       - run:
#           name: install
#           command: npm install
#           working_directory: frontend
#       - save_cache:
#           key: npm-deps-{{ .Branch }}-{{ checksum \"frontend/package-lock.json\"}}
#           paths:
#             - frontend/node_modules
#       - run:
#           name: frontend test
#           command: npm run test
#           working_directory: frontend
#   backend-test:
#     docker:
#       - image: circleci/node:12.0.0
#     steps:
#       - set-stage-env
#       - checkout
#       - restore_cache:
#           keys:
#             - npm-deps-{{ .Branch }}-{{ checksum \"backend/src/package-lock.json\"}}
#             - npm-deps-{{ .Branch }}
#             - npm-deps-
#       - run:
#           name: install
#           command: npm install
#           working_directory: backend
#       - save_cache:
#           key: npm-deps-{{ .Branch }}-{{ checksum \"backend/src/package-lock.json\"}}
#           paths:
#             - backend/src/node_modules
#       - run:
#           name: set GCP Credentials
#           command: |
#             echo ${GCP_TEST_CREDENTIALS} > ./serviceAccountKey.json
#             echo \"export GOOGLE_APPLICATION_CREDENTIALS=./serviceAccountKey.json\" >> $BASH_ENV
#           working_directory: backend/src
#       - run:
#           name: backend unit test
#           command: npm run test
#           working_directory: backend/src
#       - run:
#           name: backend link test
#           command: npm run linktest
#           working_directory: backend/src
#   api-test:
#     docker:
#       - image: circleci/node:12.0.0
#     steps:
#       - set-stage-env
#       - checkout
#       - restore_cache:
#           keys:
#             - npm-deps-{{ .Branch }}-{{ checksum \"api/src/package-lock.json\"}}
#             - npm-deps-{{ .Branch }}
#             - npm-deps-
#       - run:
#           name: install
#           command: npm install
#           working_directory: api/src
#       - save_cache:
#           key: npm-deps-{{ .Branch }}-{{ checksum \"api/src/package-lock.json\"}}
#           paths:
#             - api/src/node_modules
#       - run:
#           name: api unit test
#           command: npm run test
#           working_directory: api/src
#   frontend-build:
#     docker:
#       - image: circleci/node:10.1.0
#     steps:
#       - set-stage-env
#       - checkout
#       - restore_cache:
#           keys:
#             - npm-deps-{{ .Branch }}-{{ checksum \"frontend/package-lock.json\"}}
#       - run:
#           name: install
#           command: npm install
#           working_directory: frontend
#       - run:
#           name: build
#           command: npm run build -- --env.version=${FRONTEND_VERSION} --env.apistage=${API_STAGE} --env.apihost=${API_HOST}
#           working_directory: frontend
#       - persist_to_workspace:
#           root: frontend
#           paths:
#             - dist
#   deploy:
#     executor: aws-cli/default
#     steps:
#       - set-stage-env
#       - checkout
#       - attach_workspace:
#           at: frontend
#       - restore_cache:
#           keys:
#             - npm-deps-{{ .Branch }}-{{ checksum \"api/src/package-lock.json\"}}
#             - npm-deps-{{ .Branch }}
#             - npm-deps-
#       - restore_cache:
#           keys:
#             - npm-deps-{{ .Branch }}-{{ checksum \"backend/package-lock.json\"}}
#             - npm-deps-{{ .Branch }}
#             - npm-deps-
#       - restore_cache:
#           keys:
#             - npm-deps-{{ .Branch }}-{{ checksum \"frontend/package-lock.json\"}}
#             - npm-deps-{{ .Branch }}
#             - npm-deps-
#       - aws-cli/install
#       - run:
#           name: set-script
#           command: |
#             WD=`eval \"echo ${CIRCLE_WORKING_DIRECTORY}\"`
#             chmod +x $WD/script/isChanged
#             echo \"export PATH=$WD/script:$PATH\" >> $BASH_ENV
#       - run:
#           name: frontend deploy
#           command: |
#             if isChanged \"frontend\"; then
#               aws s3 sync frontend/dist s3://throwtrash
#               if [ \"${CIRCLE_BRANCH}\" == \"deploy\" ]; then
#                 aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DST_ID} --paths /v${FRONTEND_VERSION}/*
#               fi
#             fi
#       - run:
#           name: backend deploy
#           command: |
#             if isChanged \"backend\"; then
#               if [ \"${CIRCLE_BRANCH}\" == \"deploy\" ]; then
#                 echo ${GCP_PRODUCTION_CREDENTIALS} > backend/src/serviceAccountKey.json
#               else
#                 echo ${GCP_TEST_CREDENTIALS} > backend/src/serviceAccountKey.json
#               fi
#               aws cloudformation deploy --template-file backend/cfn/db-template.yml --stack-name throwtrash-backend-db --role-arn ${BACKEND_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM --region ${DBREGION}
#               aws cloudformation package --template-file backend/cfn/template.yml --output-template-file backend/cfn/package-template.yml --s3-bucket lambda-function-deployment-${AWS_DEFAULT_REGION} --s3-prefix throwtrashbackend
#               aws cloudformation deploy --template-file backend/cfn/package-template.yml --stack-name throwtrash-backend-${STAGE} --parameter-overrides GOOGLECLIENTID=${GOOGLE_CLIENT_ID} GOOGLECLIENTSECRET=${GOOGLE_CLIENT_SECRET} RUNLEVEL=${RUNLEVEL} STAGE=${STAGE} DBREGION=${DBREGION} --role-arn ${BACKEND_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM
#             fi
#       - run:
#           name: api deploy
#           command: |
#             if isChanged \"api\"; then
#               aws cloudformation package --template-file api/template.yml --output-template-file api/package-template.yml --s3-bucket lambda-function-deployment-${AWS_DEFAULT_REGION} --s3-prefix throwtrashapi
#               aws cloudformation deploy --template-file api/package-template.yml --stack-name throwtrash-mobile-api-stack --parameter-overrides RUNLEVEL=${RUNLEVEL} APISTAGE=${API_STAGE} --role-arn ${API_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM
#             fi
# workflows:
#   version: 2
#   test_and_deploy:
#     jobs:
#       - frontend-test:
#           context: aws-test
#           filters:
#             branches:
#               ignore: master
#       - backend-test:
#           context: aws-test
#           filters:
#             branches:
#               ignore: master
#       - api-test:
#           filters:
#             branches:
#               ignore: master
#       - frontend-build:
#           requires:
#             - frontend-test
#           filters:
#             branches:
#               ignore: master
#       - deploy:
#           requires:
#             - frontend-build
#             - backend-test
#             - api-test
#           filters:
#             branches:
#               ignore: master
#           context: aws-deploy