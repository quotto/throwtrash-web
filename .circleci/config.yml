version: "2.1"
orbs:
  aws-cli: circleci/aws-cli@0.1.16

commands:
  set-stage-env:
    steps:
      - run:
          command: |
            if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
              echo "export AWS_DEFAULT_REGION=${AWS_PRODUCTION_REGION}" >> $BASH_ENV
              echo "export API_HOST=backend.mythrowaway.net" >> $BASH_ENV
              echo "export RUNLEVEL=INFO" >> $BASH_ENV
            else
              echo "export AWS_DEFAULT_REGION=${AWS_DEVELOPMENT_REGION}" >> $BASH_ENV
              echo "export RUNLEVEL=DEBUG" >> $BASH_ENV
              echo "export API_STAGE=test" >> $BASH_ENV
              echo "export API_HOST=test-backend.mythrowaway.net" >> $BASH_ENV
              echo "export FRONTEND_VERSION=0" >> $BASH_ENV
              echo "export BACKEND_ALIAS=test" >> $BASH_ENV
            fi

jobs:
  frontend-test:
    docker:
      - image: circleci/node:10.1.0
    steps:
      - set-stage-env
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
            - npm-deps-{{ .Branch }}
            - npm-deps-
      - run:
          name: install
          command: npm install
          working_directory: frontend
      - save_cache:
          key: npm-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
          paths:
            - frontend/node_modules
      - run:
          name: frontend test
          command: npm run test
          working_directory: frontend
  backend-test:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - set-stage-env
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json"}}
            - npm-deps-{{ .Branch }}
            - npm-deps-
      - run:
          name: install
          command: npm install
          working_directory: backend
      - save_cache:
          key: npm-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json"}}
          paths:
            - backend/node_modules
      - run:
          name: set GCP Credentials
          command: |
            echo ${GCP_TEST_CREDENTIALS} > ./serviceAccountKey.json
            echo "export GOOGLE_APPLICATION_CREDENTIALS=./serviceAccountKey.json" >> $BASH_ENV
          working_directory: backend
      - run:
          name: backend unit test
          command: npm run test
          working_directory: backend
      - run:
          name: backend link test
          command: npm run linktest
          working_directory: backend
  frontend-build:
    docker:
      - image: circleci/node:10.1.0
    steps:
      - set-stage-env
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
      - run:
          name: install
          command: npm install
          working_directory: frontend
      - run:
          name: build
          command: npm run build -- --env.version=${FRONTEND_VERSION} --env.apistage=${API_STAGE} --env.apihost=${API_HOST}
          working_directory: frontend
      - persist_to_workspace:
          root:  .
          paths:
            - frontend
            - backend
  deploy:
    executor: aws-cli/default
    steps:
      - set-stage-env
      - attach_workspace:
          at: .
      - aws-cli/install
      - run:
          name: frontend deploy
          command: |
            aws s3 sync frontend/dist s3://throwtrash
            if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DST_ID} --paths /v${FRONTEND_VERSION}/*
            fi
      - restore_cache:
          keys:
            - npm-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json"}}
      - run:
          name: backend deploy
          command: |
            if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
              echo ${GCP_PRODUCTION_CREDENTIALS} > backend/serviceAccountKey.json
            else
              echo ${GCP_TEST_CREDENTIALS} > backend/serviceAccountKey.json
            fi
            aws cloudformation package --template-file backend/template.yml --output-template-file backend/package-template.yml --s3-bucket lambda-function-deployment-${AWS_DEFAULT_REGION} --s3-prefix throwtrashbackend
            aws cloudformation deploy --template-file backend/package-template.yml --stack-name throwtrash-backend-stack --parameter-overrides GOOGLECLIENTID=${GOOGLE_CLIENT_ID} GOOGLECLIENTSECRET=${GOOGLE_CLIENT_SECRET} RUNLEVEL=${RUNLEVEL} APISTAGE=${API_STAGE} --role-arn ${BACKEND_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM
workflows:
  version: 2
  test_and_deploy:
    jobs:
      - frontend-test:
          context: aws-test
          filters:
            branches:
              ignore: master
      - backend-test:
          context: aws-test
          filters:
            branches:
              ignore: master
      - frontend-build:
          requires:
            - frontend-test
            - backend-test
          filters:
            branches:
              ignore: master
      - deploy:
          requires:
            - frontend-build
          filters:
            branches:
              ignore: master
          context: aws-deploy