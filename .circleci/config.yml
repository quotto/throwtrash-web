version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1

commands:
  set-stage-env:
    steps:
      - run:
          command: |
            if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
              echo "export RUNLEVEL=INFO" >> $BASH_ENV
              echo "export FRONT_STAGE=v4" >> $BASH_ENV
              echo "export BACK_STAGE=v4" >> $BASH_ENV
              echo "export MOBILE_API_STAGE=v4" >> $BASH_ENV
              echo "export DBREGION=ap-northeast-1" >> $BASH_ENV
              echo "export SKILL_STAGE=live" >> $BASH_ENV
            else
              echo "export RUNLEVEL=DEBUG" >> $BASH_ENV
              echo "export FRONT_STAGE=dev" >> $BASH_ENV
              echo "export BACK_STAGE=dev" >> $BASH_ENV
              echo "export DBREGION=us-west-2" >> $BASH_ENV
              BRANCH_HASH=$(echo ${CIRCLE_BRANCH} | sha256sum)
              echo "export MOBILE_API_STAGE=${BRANCH_HASH:0:8}" >> $BASH_ENV
              echo "export SKILL_STAGE=development" >> $BASH_ENV
            fi

jobs:
  frontend-test:
    docker:
      - image: circleci/node:14.0.0
    steps:
      - set-stage-env
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
            - npm-deps-{{ .Branch }}
            - npm-deps-
      - run:
          name: install
          command: npm ci
          working_directory: frontend
      - save_cache:
          key: npm-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
          paths:
            - frontend/node_modules
      - run:
          name: frontend test
          command: npm run test
          working_directory: frontend
  backend-test:
    docker:
      - image: cimg/node:16.17
    steps:
      - set-stage-env
      - checkout
      - restore_cache:
          keys:
            - npm-deps-back-{{ .Branch }}-{{ checksum "backend/src/package-lock.json"}}
            - npm-deps-back-{{ .Branch }}
            - npm-deps-back
      - run:
          name: install
          command: |
            npm ci
          working_directory: backend/src
      - save_cache:
          key: npm-deps-back-{{ .Branch }}-{{ checksum "backend/src/package-lock.json"}}
          paths:
            - backend/src/node_modules
      - run:
          name: set GCP Credentials
          command: |
            echo ${GCP_TEST_CREDENTIALS} > ./serviceAccountKey.json
            echo "export GOOGLE_APPLICATION_CREDENTIALS=./serviceAccountKey.json" >> $BASH_ENV
          working_directory: backend/src
      - run:
          name: backend unit test
          command: npm run test
          working_directory: backend/src
  api-test:
    docker:
      - image: cimg/node:16.17
    steps:
      - set-stage-env
      - checkout
      - restore_cache:
          keys:
            - npm-deps-api-test-{{ .Branch }}-{{ checksum "api/src/package-lock.json"}}
            - npm-deps-api-test-{{ .Branch }}
            - npm-deps-api-test
      - run:
          name: install
          command: |
            npm ci
          working_directory: api/src
      - save_cache:
          key: npm-deps-api-test-{{ .Branch }}-{{ checksum "api/src/package-lock.json"}}
          paths:
            - api/src/node_modules
      - run:
          name: api unit test
          command: npm run test
          working_directory: api/src
  frontend-build:
    docker:
      - image: circleci/node:14.0.0
    steps:
      - set-stage-env
      - checkout
      - restore_cache:
          keys:
            - npm-deps-front-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
      - run:
          name: install
          command: npm ci
          working_directory: frontend
      - run:
          name: build
          command: npm run build -- --env stage=${FRONT_STAGE}
          working_directory: frontend
      - persist_to_workspace:
          root: frontend
          paths:
            - frontend-dist
  backend-build:
    docker:
      - image: cimg/node:16.17
    steps:
      - set-stage-env
      - checkout
      - run:
          # パッケージに不要なtscはグローバルにインストールする
          name: typescript install
          command: sudo npm install -g typescript
      - restore_cache:
          keys:
            - npm-deps-back-prod-{{ .Branch }}-{{ checksum "backend/src/package-lock.json"}}
      - run:
          name: package install
          command: |
            npm ci --production
          working_directory: backend/src
      - save_cache:
          key: npm-deps-back-prod-{{ .Branch }}-{{ checksum "backend/src/package-lock.json"}}
          paths:
            - backend/src/node_modules
      - run:
          name: build
          command: npm run build
          working_directory: backend/src
      - persist_to_workspace:
          root: backend/src
          paths:
            - backend-dist
  api-build:
    docker:
      - image: cimg/node:16.17
    steps:
      - set-stage-env
      - checkout
      - run:
          # パッケージに不要なtscはグローバルにインストールする
          name: typescript install
          command: sudo npm install -g typescript

      - restore_cache:
          keys:
            - npm-deps-api-prod-{{ .Branch }}-{{ checksum "api/src/package-lock.json"}}
      - run:
          name: package install
          command: |
            npm ci --production
          working_directory: api/src
      - save_cache:
          key: npm-deps-api-prod-{{ .Branch }}-{{ checksum "api/src/package-lock.json"}}
          paths:
            - api/src/node_modules
      - run:
          name: build
          command: npm run build
          working_directory: api/src
      - persist_to_workspace:
          root: api/src
          paths:
            - api-dist
  deploy:
    executor: aws-cli/default
    steps:
      - set-stage-env
      - checkout
      - attach_workspace:
          at: frontend
      - attach_workspace:
          at: backend/src
      - attach_workspace:
          at: api/src
      - run:
          name: debug-dir
          command: find .
      # Layer作成のためnode_modulesをrestore
      - restore_cache:
          keys:
            - npm-deps-api-prod-{{ .Branch }}-{{ checksum "api/src/package-lock.json"}}
      # Layer作成のためnode_modulesをrestore
      - restore_cache:
          keys:
            - npm-deps-back-prod-{{ .Branch }}-{{ checksum "backend/src/package-lock.json"}}
      - restore_cache:
          keys:
            - npm-deps-front-{{ .Branch }}-{{ checksum "frontend/package-lock.json"}}
            - npm-deps-front-{{ .Branch }}
            - npm-deps-front
      - aws-cli/install
      - run:
          name: set-script
          command: |
            WD=`eval "echo ${CIRCLE_WORKING_DIRECTORY}"`
            chmod +x $WD/script/isChanged
            echo "export PATH=$WD/script:$PATH" >> $BASH_ENV
      - run:
          name: frontend deploy
          command: |
            aws s3 sync frontend/frontend-dist/${FRONT_STAGE} s3://throwtrash/${FRONT_STAGE}
            # 本番デプロイ時はデプロイステージのキャッシュをクリア
            if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DST_ID} --paths /${FRONT_STAGE}/*
            fi
      - run:
          name: backend deploy
          command: |
            if [ "${CIRCLE_BRANCH}" == "deploy" ]; then
              echo ${GCP_PRODUCTION_CREDENTIALS} > backend/src/backend-dist/serviceAccountKey.json
            else
              echo ${GCP_TEST_CREDENTIALS} > backend/src/backend-dist/serviceAccountKey.json
            fi

            # DBのデプロイ
            aws cloudformation deploy --template-file backend/cfn/db-template.yml --stack-name throwtrash-backend-db --role-arn ${BACKEND_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset --region=${DBREGION}

            # lambdaでは1980年以前のタイムスタンプを持つファイルをzipできないためざっくりと1981年以前のファイル日時を更新する
            YEAR_DIFF=$(expr `date +%Y` - 1981)
            DATE_DIFF=$(expr $YEAR_DIFF \* 365)
            find backend/src/node_modules -daystart -mtime +$DATE_DIFF -exec touch {} \;

            # Lambda LayersのNodeJSモジュールはnodejsの下に配置が必要
            mkdir -p backend/src/layer/nodejs
            mv backend/src/node_modules backend/src/layer/nodejs

            # API/Lambdaのパッケージングとデプロイ
            aws cloudformation package --template-file backend/cfn/func-template.yml --output-template-file backend/cfn/package-template.yml --s3-bucket lambda-function-deployment-${AWS_DEFAULT_REGION} --s3-prefix throwtrashbackend

            aws cloudformation deploy --template-file backend/cfn/package-template.yml --stack-name throwtrash-backend-${BACK_STAGE} --parameter-overrides Stage=${BACK_STAGE} AlexaClientID=${ALEXA_CLIENT_ID} AlexaClientSecret=${ALEXA_CLIENT_SECRET} GoogleClientID=${GOOGLE_CLIENT_ID} GoogleClientSecret=${GOOGLE_CLIENT_SECRET} RunLevel=${RUNLEVEL} DBRegion=${DBREGION} AlexaUserClientID=${ALEXA_USER_CLIENT_ID} AlexaUserSecret=${ALEXA_USER_SECRET} GoogleUserClientID=${GOOGLE_USER_CLIENT_ID} GoogleUserSecret=${GOOGLE_USER_SECRET} AlexaSkillID=${ALEXA_SKILL_ID} --role-arn ${BACKEND_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset
      - run:
          name: api deploy
          command: |
            # DBのデプロイ
            aws cloudformation deploy --template-file api/db-template.yml --stack-name throwtrash-mobile-db --role-arn ${API_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset --region=${DBREGION}

            # Lambda LayersのNodeJSモジュールはnodejsの下に配置が必要
            mkdir -p api/src/layer/nodejs
            mv api/src/node_modules api/src/layer/nodejs

            # API/Lambdaのパッケージングとデプロイ
            aws cloudformation package --template-file api/func-template.yml --output-template-file api/package-template.yml --s3-bucket lambda-function-deployment-${AWS_DEFAULT_REGION} --s3-prefix throwtrashapi

            # ResourceEndpointの設定
            RESOURCE_ENDPOINT="https://backend.mythrowaway.net/${BACK_STAGE}"
            aws cloudformation deploy --template-file api/package-template.yml --stack-name throwtrash-mobile-${MOBILE_API_STAGE} --parameter-overrides RunLevel=${RUNLEVEL} Stage=${MOBILE_API_STAGE} DBRegion=${DBREGION} SkillStage=${SKILL_STAGE} AlexaSkillID=${ALEXA_SKILL_ID} AlexaClientID=${ALEXA_CLIENT_ID} AlexaClientSecret=${ALEXA_CLIENT_SECRET} ResourceEndpoint=https://backend.mythrowaway.net/${BACK_STAGE} BackendApiKey=${BACKEND_API_KEY} --role-arn ${API_CFN_ROLE} --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset
workflows:
  version: 2
  test_and_deploy:
    jobs:
      - frontend-test:
          context: aws-test
          filters:
            branches:
              ignore: master
      - backend-test:
          context: aws-test
          filters:
            branches:
              ignore: master
      - api-test:
          filters:
            branches:
              ignore: master
      - frontend-build:
          requires:
            - frontend-test
          filters:
            branches:
              ignore: master
      - backend-build:
          requires:
            - backend-test
          filters:
            branches:
              ignore: master
      - api-build:
          requires:
            - api-test
          filters:
            branches:
              ignore: master
      - deploy:
          requires:
            - frontend-build
            - api-build
            - backend-build
          filters:
            branches:
              ignore: master
          context: aws-deploy